total_vacant.2016 = B25002_003E) %>%
mutate(mtAiry = ifelse(GEOID %in% myTracts, "MT AIRY", ifelse(total_HU.2016==0,"NO REPORTED HOUSING UNITS","REST OF PHILADELPHIA"))) %>%
# put default of NA if denominator column value is 0
mutate(vacant_percent.2016 = ifelse(total_HU.2016 != 0, total_vacant.2016/total_HU.2016*100,NA), missing_data_label = ifelse(total_HU.2016==0,"missing total_HU.2016","")) %>%
st_as_sf(crs=4326)
# create and style plot
ggplot(partB_ACS)+
geom_sf(aes(fill=vacant_percent.2016))+
geom_sf(data=partB_ACS%>%filter(mtAiry=="MT AIRY")%>%st_union()%>%aes(fill="transparent",color="green"))+
geom_sf(data=partB_ACS%>%filter(mtAiry=="NO REPORTED HOUSING UNITS")%>%st_union()%>%aes(fill="transparent",color-"brown"))+
labs(
title = "2016 Percentage of Vacant Housing Units Per Tract",
caption = "Data: US Census Bureau, ACS 5-year estimates")
# make 2016 vacant percentage column
#  make ggplot map of new column
#  & outline Mt. Airy on the Map
# acs with geometry = TRUE this time
# still requires myTracts to denote tracts in Mt. Airy
partB_ACS <- get_acs(geography = "tract",
year = 2016,
variables = acs_vars,
geometry = TRUE,
state = "PA",
county = "Philadelphia",
output = "wide") %>%
dplyr::select (GEOID, NAME, acs_vars[1:5]) %>% # assumes we only care about variables 1-5, setup matters
rename (total_pop.2016 = B01001_001E,
total_HU.2016 = B25002_001E,
total_vacant.2016 = B25002_003E) %>%
mutate(mtAiry = ifelse(GEOID %in% myTracts, "MT AIRY", ifelse(total_HU.2016==0,"NO REPORTED HOUSING UNITS","REST OF PHILADELPHIA"))) %>%
# put default of NA if denominator column value is 0
mutate(vacant_percent.2016 = ifelse(total_HU.2016 != 0, total_vacant.2016/total_HU.2016*100,NA), missing_data_label = ifelse(total_HU.2016==0,"missing total_HU.2016","")) %>%
st_as_sf(crs=4326)
# create and style plot
ggplot(partB_ACS)+
geom_sf(aes(fill=vacant_percent.2016))+
geom_sf(data=partB_ACS%>%filter(mtAiry=="MT AIRY")%>%st_union()%>%st_union(),fill="transparent",color="green"))+
# make 2016 vacant percentage column
#  make ggplot map of new column
#  & outline Mt. Airy on the Map
# acs with geometry = TRUE this time
# still requires myTracts to denote tracts in Mt. Airy
partB_ACS <- get_acs(geography = "tract",
year = 2016,
variables = acs_vars,
geometry = TRUE,
state = "PA",
county = "Philadelphia",
output = "wide") %>%
dplyr::select (GEOID, NAME, acs_vars[1:5]) %>% # assumes we only care about variables 1-5, setup matters
rename (total_pop.2016 = B01001_001E,
total_HU.2016 = B25002_001E,
total_vacant.2016 = B25002_003E) %>%
mutate(mtAiry = ifelse(GEOID %in% myTracts, "MT AIRY", ifelse(total_HU.2016==0,"NO REPORTED HOUSING UNITS","REST OF PHILADELPHIA"))) %>%
# put default of NA if denominator column value is 0
mutate(vacant_percent.2016 = ifelse(total_HU.2016 != 0, total_vacant.2016/total_HU.2016*100,NA), missing_data_label = ifelse(total_HU.2016==0,"missing total_HU.2016","")) %>%
st_as_sf(crs=4326)
# create and style plot
ggplot(partB_ACS)+
geom_sf(aes(fill=vacant_percent.2016))+
geom_sf(data=partB_ACS%>%filter(mtAiry=="MT AIRY")%>%st_union()%>%st_union(),fill="transparent",color="green"))+
# make 2016 vacant percentage column
#  make ggplot map of new column
#  & outline Mt. Airy on the Map
# acs with geometry = TRUE this time
# still requires myTracts to denote tracts in Mt. Airy
partB_ACS <- get_acs(geography = "tract",
year = 2016,
variables = acs_vars,
geometry = TRUE,
state = "PA",
county = "Philadelphia",
output = "wide") %>%
dplyr::select (GEOID, NAME, acs_vars[1:5]) %>% # assumes we only care about variables 1-5, setup matters
rename (total_pop.2016 = B01001_001E,
total_HU.2016 = B25002_001E,
total_vacant.2016 = B25002_003E) %>%
mutate(mtAiry = ifelse(GEOID %in% myTracts, "MT AIRY", ifelse(total_HU.2016==0,"NO REPORTED HOUSING UNITS","REST OF PHILADELPHIA"))) %>%
# put default of NA if denominator column value is 0
mutate(vacant_percent.2016 = ifelse(total_HU.2016 != 0, total_vacant.2016/total_HU.2016*100,NA), missing_data_label = ifelse(total_HU.2016==0,"missing total_HU.2016","")) %>%
st_as_sf(crs=4326)
# create and style plot
ggplot(partB_ACS)+
geom_sf(aes(fill=vacant_percent.2016))+
geom_sf(data=partB_ACS%>%filter(mtAiry=="MT AIRY")%>%st_union()%>%st_union(),fill="transparent",color="green")+
geom_sf(data=partB_ACS%>%filter(mtAiry=="NO REPORTED HOUSING UNITS")%>%st_union(),fill="transparent",color-"brown")+
labs(
title = "2016 Percentage of Vacant Housing Units Per Tract",
caption = "Data: US Census Bureau, ACS 5-year estimates")
# make 2016 vacant percentage column
#  make ggplot map of new column
#  & outline Mt. Airy on the Map
# acs with geometry = TRUE this time
# still requires myTracts to denote tracts in Mt. Airy
partB_ACS <- get_acs(geography = "tract",
year = 2016,
variables = acs_vars,
geometry = TRUE,
state = "PA",
county = "Philadelphia",
output = "wide") %>%
dplyr::select (GEOID, NAME, acs_vars[1:5]) %>% # assumes we only care about variables 1-5, setup matters
rename (total_pop.2016 = B01001_001E,
total_HU.2016 = B25002_001E,
total_vacant.2016 = B25002_003E) %>%
mutate(mtAiry = ifelse(GEOID %in% myTracts, "MT AIRY", ifelse(total_HU.2016==0,"NO REPORTED HOUSING UNITS","REST OF PHILADELPHIA"))) %>%
# put default of NA if denominator column value is 0
mutate(vacant_percent.2016 = ifelse(total_HU.2016 != 0, total_vacant.2016/total_HU.2016*100,NA), missing_data_label = ifelse(total_HU.2016==0,"missing total_HU.2016","")) %>%
st_as_sf(crs=4326)
# create and style plot
ggplot(partB_ACS)+
geom_sf(aes(fill=vacant_percent.2016))+
geom_sf(data=partB_ACS%>%filter(mtAiry=="MT AIRY")%>%st_union()%>%st_union(),fill="transparent",colour="green")+
geom_sf(data=partB_ACS%>%filter(mtAiry=="NO REPORTED HOUSING UNITS")%>%st_union(),fill="transparent",colour-"brown")+
labs(
title = "2016 Percentage of Vacant Housing Units Per Tract",
caption = "Data: US Census Bureau, ACS 5-year estimates")
# make 2016 vacant percentage column
#  make ggplot map of new column
#  & outline Mt. Airy on the Map
# acs with geometry = TRUE this time
# still requires myTracts to denote tracts in Mt. Airy
partB_ACS <- get_acs(geography = "tract",
year = 2016,
variables = acs_vars,
geometry = TRUE,
state = "PA",
county = "Philadelphia",
output = "wide") %>%
dplyr::select (GEOID, NAME, acs_vars[1:5]) %>% # assumes we only care about variables 1-5, setup matters
rename (total_pop.2016 = B01001_001E,
total_HU.2016 = B25002_001E,
total_vacant.2016 = B25002_003E) %>%
mutate(mtAiry = ifelse(GEOID %in% myTracts, "MT AIRY", ifelse(total_HU.2016==0,"NO REPORTED HOUSING UNITS","REST OF PHILADELPHIA"))) %>%
# put default of NA if denominator column value is 0
mutate(vacant_percent.2016 = ifelse(total_HU.2016 != 0, total_vacant.2016/total_HU.2016*100,NA), missing_data_label = ifelse(total_HU.2016==0,"missing total_HU.2016","")) %>%
st_as_sf(crs=4326)
# create and style plot
ggplot(partB_ACS)+
geom_sf(aes(fill=vacant_percent.2016))+
geom_sf(data=partB_ACS%>%filter(mtAiry=="MT AIRY")%>%st_union()%>%st_union(),fill="transparent",color="green")+
geom_sf(data=partB_ACS%>%filter(mtAiry=="NO REPORTED HOUSING UNITS")%>%st_union(),fill="transparent",color-"brown")+
labs(
title = "2016 Percentage of Vacant Housing Units Per Tract",
caption = "Data: US Census Bureau, ACS 5-year estimates")
# make 2016 vacant percentage column
#  make ggplot map of new column
#  & outline Mt. Airy on the Map
# acs with geometry = TRUE this time
# still requires myTracts to denote tracts in Mt. Airy
partB_ACS <- get_acs(geography = "tract",
year = 2016,
variables = acs_vars,
geometry = TRUE,
state = "PA",
county = "Philadelphia",
output = "wide") %>%
dplyr::select (GEOID, NAME, acs_vars[1:5]) %>% # assumes we only care about variables 1-5, setup matters
rename (total_pop.2016 = B01001_001E,
total_HU.2016 = B25002_001E,
total_vacant.2016 = B25002_003E) %>%
mutate(mtAiry = ifelse(GEOID %in% myTracts, "MT AIRY", ifelse(total_HU.2016==0,"NO REPORTED HOUSING UNITS","REST OF PHILADELPHIA"))) %>%
# put default of NA if denominator column value is 0
mutate(vacant_percent.2016 = ifelse(total_HU.2016 != 0, total_vacant.2016/total_HU.2016*100,NA), missing_data_label = ifelse(total_HU.2016==0,"missing total_HU.2016","")) %>%
st_as_sf(crs=4326)
# create and style plot
ggplot(partB_ACS)+
geom_sf(aes(fill=vacant_percent.2016))+
geom_sf(data=partB_ACS%>%filter(mtAiry=="MT AIRY")%>%st_union(),fill="transparent",color="green")+
geom_sf(data=partB_ACS%>%filter(mtAiry=="NO REPORTED HOUSING UNITS")%>%st_union(),fill="transparent",color-"brown")+
labs(
title = "2016 Percentage of Vacant Housing Units Per Tract",
caption = "Data: US Census Bureau, ACS 5-year estimates")
# make 2016 vacant percentage column
#  make ggplot map of new column
#  & outline Mt. Airy on the Map
# acs with geometry = TRUE this time
# still requires myTracts to denote tracts in Mt. Airy
partB_ACS <- get_acs(geography = "tract",
year = 2016,
variables = acs_vars,
geometry = TRUE,
state = "PA",
county = "Philadelphia",
output = "wide") %>%
dplyr::select (GEOID, NAME, acs_vars[1:5]) %>% # assumes we only care about variables 1-5, setup matters
rename (total_pop.2016 = B01001_001E,
total_HU.2016 = B25002_001E,
total_vacant.2016 = B25002_003E) %>%
mutate(mtAiry = ifelse(GEOID %in% myTracts, "MT AIRY", ifelse(total_HU.2016==0,"NO REPORTED HOUSING UNITS","REST OF PHILADELPHIA"))) %>%
# put default of NA if denominator column value is 0
mutate(vacant_percent.2016 = ifelse(total_HU.2016 != 0, total_vacant.2016/total_HU.2016*100,NA), missing_data_label = ifelse(total_HU.2016==0,"missing total_HU.2016","")) %>%
st_as_sf(crs=4326)
# create and style plot
ggplot(partB_ACS)+
geom_sf(aes(fill=vacant_percent.2016))+
geom_sf(data=partB_ACS%>%filter(mtAiry=="MT AIRY")%>%st_union(),fill="transparent",color="green")+
geom_sf(data=partB_ACS%>%filter(mtAiry=="NO REPORTED HOUSING UNITS")%>%st_union(),fill="transparent",color="brown")+
labs(
title = "2016 Percentage of Vacant Housing Units Per Tract",
caption = "Data: US Census Bureau, ACS 5-year estimates")
# geom_sf(data = acsTractsPHL.2020.sf %>%
#             filter(mtAiry == "MT AIRY") %>%
#             st_union(),
#           color = "white",
#           fill = "transparent")
View(partB_ACS)
??knitr
??knit
pwd
cwd
knit2html(Oliver_TimothyHW1.Rmd,Oliver_TimothyHW1.html)
knit2html(Oliver_TimothyHW1.Rmd,Oliver_TimothyHW1.html)
knit2html(~/Oliver_TimothyHW1.Rmd,~/Oliver_TimothyHW1.html)
knit2html(~//Oliver_TimothyHW1.Rmd,~\Oliver_TimothyHW1.html)
knit2html(~\Oliver_TimothyHW1.Rmd,~\Oliver_TimothyHW1.html)
??pwd
getwd()
ls
getwd()
list.files
list.files()
knit2html("Oliver_TimothyHW1.Rmd","Oliver_TimothyHW1.html")
??rmarkdown::render
rmarkdown::render("Oliver_TimothyHW1.Rmd","html_document",Oliver_TimothyHW1.html")
)
)
s
;
woekrj
""
rmarkdown::render("Oliver_TimothyHW1.Rmd","html_document","Oliver_TimothyHW1.html")
rmarkdown::render("Oliver_TimothyHW1.Rmd","html_document","Oliver_TimothyHW1.html")
??census_api_key
??labs
rmarkdown::render("Oliver_TimothyHW1.Rmd","html_document","Oliver_TimothyHW1.html")
View(partC_ACS)
View(partC_ACS)
rmarkdown::render("Oliver_TimothyHW1.Rmd","html_document","Oliver_TimothyHW1.html")
rmarkdown::render("Oliver_TimothyHW1.Rmd","html_document","Oliver_TimothyHW1.html")
??author
rmarkdown::render("Oliver_TimothyHW1.Rmd","html_document","Oliver_TimothyHW1.html")
??legend
rmarkdown::render("Oliver_TimothyHW1.Rmd","html_document","C://Users//timol//Desktop//TestingEval.html")
rmarkdown::render("Oliver_TimothyHW1.Rmd","html_document","TestingEval.html")
rmarkdown::render("Oliver_TimothyHW1.Rmd","html_document","TestingEval.html")
rmarkdown::render("Oliver_TimothyHW1.Rmd","html_document","TestingEval.html")
library(magrittr)
rmarkdown::render("Oliver_TimothyHW1.Rmd","html_document","TestingEval.html")
rmarkdown::render("Oliver_TimothyHW1.Rmd","html_document","TestingEval.html")
rmarkdown::render("Oliver_TimothyHW1.Rmd","html_document","TestingEval.html")
?chunk_options
??chunk_options
??{r}
??{r}
rmarkdown::render("Oliver_TimothyHW1.Rmd","html_document","TestingEval.html")
rmarkdown::render("Oliver_TimothyHW1.Rmd","html_document","TestingEval.html")
rmarkdown::render("Oliver_TimothyHW1.Rmd","html_document","TestingEval.html")
rmarkdown::render("Oliver_TimothyHW1.Rmd","html_document","TestingEval.html")
rmarkdown::render("Oliver_TimothyHW1.Rmd","html_document","TestingEval.html")
rmarkdown::render("Oliver_TimothyHW1.Rmd","html_document","TestingEval.html")
rmarkdown::render("TestingEval.Rmd","html_document","TestingEval.html")
rmarkdown::render("TestingEval.Rmd","html_document","TestingEval.html")
rmarkdown::render("TestingEval.Rmd","html_document","TestingEval.html")
rmarkdown::render("TestingEval.Rmd","html_document","TestingEval2.html")
rmarkdown::render("TestingEval.Rmd","html_document","TestingEval3.html")
rmarkdown::render("TestingEval.Rmd","html_document","TestingEval3.html")
rmarkdown::render("TestingEval.Rmd","html_document","TestingEval3.html")
rmarkdown::render("TestingEval.Rmd","html_document","TestingEvalInclude.html")
rmarkdown::render("TestingEval.Rmd","html_document","TestingEvalIncludeFalse.html")
rmarkdown::render("TestingEval.Rmd","html_document","TestingEvalIncludeFalse.html")
rmarkdown::render("intro_to_tidycensus.Rmd","html_document","test2.html")
rmarkdown::render("Oliver_TimothyHW1.Rmd","html_document","test2.html")
??rmarkdown::render
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidycensus)
library(knitr)
library(kableExtra)
library(rmarkdown)
library(sf)
acs_variable_list.2020 <- load_variables(2020, #year
"acs5", #five year ACS estimates
cache = TRUE)
acs_variable_list.2016 <- load_variables(2016, #year
"acs5", #five year ACS estimates
cache = TRUE)
acs_vars <- c("B01001_001E", # ACS total Pop estimate
"B25002_001E", # Estimate of total housing units
"B25002_003E", # Number of vacant housing units
"B19013_001E", # Median HH Income ($)
"B02001_002E", # People describing themselves as "white alone"
"B06009_006E") # Total graduate or professional degree
acsTractsPHL.2020 <- get_acs(geography = "tract",
year = 2020,
variables = acs_vars,
geometry = FALSE,
state = "PA",
county = "Philadelphia",
output = "wide")
acsTractsPHL.2020 <- acsTractsPHL.2020 %>%
dplyr::select (GEOID, NAME, all_of(acs_vars)) %>%
rename (total_pop.2020 = B01001_001E,
total_HU.2020 = B25002_001E,
total_vacant.2020 = B25002_003E,
med_HH_Income.2020 = B19013_001E,
total_White.2020 = B02001_002E,
total_GradDeg.2020 = B06009_006E) %>%
mutate(vacancyPct.2020 = total_vacant.2020/total_HU.2020,
pctWhite.2020   = total_White.2020/total_pop.2020)
acsTractsPHL.2016 <- get_acs(geography = "tract",
year = 2016,
variables = acs_vars,
geometry = FALSE,
state = "PA",
county = "Philadelphia",
output = "wide") %>%
dplyr::select (GEOID, NAME, all_of(acs_vars)) %>%
rename (total_pop.2016 = B01001_001E,
total_HU.2016 = B25002_001E,
total_vacant.2016 = B25002_003E,
med_HH_Income.2016 = B19013_001E,
total_White.2016 = B02001_002E,
total_GradDeg.2016 = B06009_006E) %>%
mutate(vacancyPct.2016 = total_vacant.2016/total_HU.2016,
pctWhite.2016 = total_White.2016/total_pop.2016)
allACS <- left_join(acsTractsPHL.2016, acsTractsPHL.2020,
by= c("GEOID")) %>%
mutate(change_med_HH_Income = med_HH_Income.2020 - (med_HH_Income.2016 * 1.08),
change_Grad_Degree_Pct = (total_GradDeg.2020/total_pop.2020)-(total_GradDeg.2016/total_pop.2016))
myTracts <- c("42101023500",
"42101023600",
"42101023700",
"42101025300",
"42101025400",
"42101025500",
"42101025600",
"42101038800")
allACS <- allACS %>%
mutate(mtAiry = ifelse(GEOID %in% myTracts, "MT AIRY", "REST OF PHILADELPHIA"))
## ggplot of vacant_housing2020 vs. vacant_housing2016
##  using color to visualize Mt. Airy tracts from rest of Philadelphia
# get change between years (if necessary)
partA_ACS <- allACS %>%
dplyr::select (GEOID, NAME.x, c(total_vacant.2016,total_vacant.2020,mtAiry)) %>%
rename(NAME = NAME.x) %>%
mutate(change_in_vacant = total_vacant.2020-total_vacant.2016)
ggplot(partA_ACS)+
# aesthetics
geom_point(aes(x = total_vacant.2016,
y = total_vacant.2020,
color = mtAiry))+
geom_smooth(aes(x = total_vacant.2016,
y = total_vacant.2020),
method = "lm", se = FALSE)+
# labels
labs(
title = "2020 Vacant Housing Unit Count vs. 2016 Vacant Housing Unit Count",
caption = "Data: US Census Bureau, ACS 5-year estimates",
x="Vacant Housing Units in 2016'",
y="Vacant Housing Units in 2020")
# make 2016 vacant percentage column
#  make ggplot map of new column
#  & outline Mt. Airy on the Map
# acs with geometry = TRUE this time
# still requires myTracts to denote tracts in Mt. Airy
partB_ACS <- get_acs(geography = "tract",
year = 2016,
variables = acs_vars,
geometry = TRUE,
state = "PA",
county = "Philadelphia",
output = "wide") %>%
dplyr::select (GEOID, NAME, acs_vars[1:5]) %>%
# assumes we only care about variables 1-5, prior setup matters
rename (total_pop.2016 = B01001_001E,
total_HU.2016 = B25002_001E,
total_vacant.2016 = B25002_003E) %>%
# adds unique mtAiry column for map
mutate(mtAiry = ifelse(GEOID %in% myTracts, "MT AIRY", ifelse(total_HU.2016==0,"NO REPORTED HOUSING UNITS","REST OF PHILADELPHIA"))) %>%
# put default of NA if denominator column value is 0
mutate(vacant_percent.2016 = ifelse(total_HU.2016 != 0, total_vacant.2016/total_HU.2016*100,NA), missing_data_label = ifelse(total_HU.2016==0,"missing total_HU.2016","")) %>%
st_as_sf(crs=4326)
ggplot(partB_ACS)+
geom_sf(aes(fill=vacant_percent.2016))+
# add outline for mtAiry tracts
geom_sf(data=partB_ACS%>%filter(mtAiry=="MT AIRY")%>%st_union(),fill="transparent",color="green")+
# add additional outline for total_HU == 0 tracts
geom_sf(data=partB_ACS%>%filter(mtAiry=="NO REPORTED HOUSING UNITS")%>%st_union(),fill="transparent",color="brown")+
# labels
labs(
title = "2016 Percentage of Vacant Housing Units Per Tract",
caption = "Data: US Census Bureau, ACS 5-year estimates")
## render kable table with summary of mean vacant housing unit # per tract
##  for Mt. Airy and the rest of Philadelphia
# load kableExtra (if first chunk was ignored)
library(kableExtra)
# get mean number of vacant housing units per tract in
#  2020 grouped by Mt. Airy or rest of Philadelphia
partC_ACS <- allACS %>%
dplyr::select (GEOID, NAME.x, c(total_vacant.2020,mtAiry)) %>%
rename(NAME = NAME.x) %>%
group_by(mtAiry) %>%
summarize(mean_vacancies = mean(total_vacant.2020, na.rm = TRUE))
# making kable table
#  first line is bare minimum (using just kbl())
partC_ACS %>% kbl(caption="Mean Vacant Housing Units Per Philadelphia Tract by Group in 2020",
col.names=c("Tract Group","Number of Mean Vacancies")) %>%
kable_classic_2(full_width = F, html_font = "Constantia") %>%
kable_styling(bootstrap_options = c("striped","hover"))
rmarkdown::render("Oliver_TimothyHW1.Rmd","html_document","going.html")
.packages()
print(.packages())
## ggplot of vacant_housing2020 vs. vacant_housing2016
##  using color to visualize Mt. Airy tracts from rest of Philadelphia
# get change between years (if necessary)
partA_ACS <- allACS %>%
dplyr::select (GEOID, NAME.x, c(total_vacant.2016,total_vacant.2020,mtAiry)) %>%
rename(NAME = NAME.x) %>%
mutate(change_in_vacant = total_vacant.2020-total_vacant.2016)
ggplot(partA_ACS)+
# aesthetics
geom_point(aes(x = total_vacant.2016,
y = total_vacant.2020,
color = mtAiry))+
geom_smooth(aes(x = total_vacant.2016,
y = total_vacant.2020),
method = "lm", se = FALSE)+
# labels
labs(
title = "2020 Vacant Housing Unit Count vs. 2016 Vacant Housing Unit Count",
caption = "Data: US Census Bureau, ACS 5-year estimates",
x="Vacant Housing Units in 2016'",
y="Vacant Housing Units in 2020")
ggplot(partA_ACS)+
# aesthetics
geom_point(aes(x = total_vacant.2016,
y = total_vacant.2020,
color = mtAiry))+
geom_smooth(aes(x = total_vacant.2016,
y = total_vacant.2020),
method = "lm", se = FALSE)+
# labels
labs(
title = "2020 Vacant Housing Unit Count vs. 2016 Vacant Housing Unit Count",
caption = "Data: US Census Bureau, ACS 5-year estimates",
x="Vacant Housing Units in 2016'",
y="Vacant Housing Units in 2020"
color = "Tract Group")
ggplot(partA_ACS)+
# aesthetics
geom_point(aes(x = total_vacant.2016,
y = total_vacant.2020,
color = mtAiry))+
geom_smooth(aes(x = total_vacant.2016,
y = total_vacant.2020),
method = "lm", se = FALSE)+
# labels
labs(
title = "2020 Vacant Housing Unit Count vs. 2016 Vacant Housing Unit Count",
caption = "Data: US Census Bureau, ACS 5-year estimates",
x="Vacant Housing Units in 2016'",
y="Vacant Housing Units in 2020",
color = "Tract Group")
ggplot(partB_ACS)+
geom_sf(aes(fill=vacant_percent.2016))+
# add outline for mtAiry tracts
geom_sf(data=partB_ACS%>%filter(mtAiry=="MT AIRY")%>%st_union(),fill="transparent",color="green")+
# add additional outline for total_HU == 0 tracts
geom_sf(data=partB_ACS%>%filter(mtAiry=="NO REPORTED HOUSING UNITS")%>%st_union(),fill="transparent",color="brown")+
# labels
labs(
title = "2016 Percentage of Vacant Housing Units Per Tract",
caption = "Data: US Census Bureau, ACS 5-year estimates")
ggplot(partB_ACS)+
geom_sf(aes(fill=vacant_percent.2016))+
# add outline for mtAiry tracts
geom_sf(data=partB_ACS%>%filter(mtAiry=="MT AIRY")%>%st_union(),fill="transparent",color="green",show.legend="color")+
# add additional outline for total_HU == 0 tracts
geom_sf(data=partB_ACS%>%filter(mtAiry=="NO REPORTED HOUSING UNITS")%>%st_union(),fill="transparent",color="brown")+
# labels
labs(
title = "2016 Percentage of Vacant Housing Units Per Tract",
caption = "Data: US Census Bureau, ACS 5-year estimates")
ggplot(partB_ACS)+
geom_sf(aes(fill=vacant_percent.2016))+
# add outline for mtAiry tracts
geom_sf(data=partB_ACS%>%filter(mtAiry=="MT AIRY")%>%st_union(),fill="transparent",color="green")+
# show.legend="color"
# add additional outline for total_HU == 0 tracts
geom_sf(data=partB_ACS%>%filter(mtAiry=="NO REPORTED HOUSING UNITS",show.legend="color")%>%st_union(),fill="transparent",color="brown")+
# labels
labs(
title = "2016 Percentage of Vacant Housing Units Per Tract",
caption = "Data: US Census Bureau, ACS 5-year estimates")
ggplot(partB_ACS)+
geom_sf(aes(fill=vacant_percent.2016))+
# add outline for mtAiry tracts
geom_sf(data=partB_ACS%>%filter(mtAiry=="MT AIRY")%>%st_union(),fill="transparent",color="green")+
# show.legend="color"
# add additional outline for total_HU == 0 tracts
geom_sf(data=partB_ACS%>%filter(mtAiry=="NO REPORTED HOUSING UNITS")%>%st_union(),fill="transparent",color="brown",show.legend="color")+
# labels
labs(
title = "2016 Percentage of Vacant Housing Units Per Tract",
caption = "Data: US Census Bureau, ACS 5-year estimates")
rmarkdown::render("Oliver_TimothyHW1.Rmd","html_document","going.html")
rmarkdown::render("Oliver_TimothyHW1.Rmd","html_document","going.html")
rmarkdown::render("Oliver_TimothyHW1.Rmd","html_document","Oliver_TimothyHW1.html")
rmarkdown::render("Oliver_TimothyHW1.Rmd","html_document","Oliver_TimothyHW1.html")
rmarkdown::render("Oliver_TimothyHW1.Rmd","html_document","Oliver_TimothyHW1.html")
View(allACS)
